# RootFolder

## Home

### ofexport2

- Design integration test framework to test main()
- Generate todo & change log as part of build
- delete main test (replaced by integration tests)
- Export model for testing - save included items, use SQLite descriptors to identify fields
- Tests failing because contexts not empty - No Context
- Don't delete root tasks, context walk is flat
- Test No Context
- Test Inbox
- Prune: use "taskCount>0"
- Sort attrib help
- inbox tasks
- Fix SQLITE date bug
- Better date function tests, and tidy up - use node expressions
- More command line tests - get a feel for usage
- Trying eliminating Excluded nodes after each expression
- filterTasksDown on included filter eliminates task we're matching on (main test)
- Regular expressions
- Look at OGNL
- exclude node if it's not included? opt to include all below included
- Sort out getX vs isX in SQLITE loader
- Issue should projects appear in contexts - or their root tasks? - check what happens
- Load notes
- Test traverser
- Test nodes - esp add(xxx), should unlink from old parents too
- Make -xa implicit
- Rethink filters
- Test knitting
- Test paths
- cmdlinf filter of functions - phases
- Natural order of tasks/items
- Group doesn't lend itself to filtering
- Filters - add means of just providing a boolean fn
- Need to re-invent filtering concepts, tree walks etc from before. include/exclude etc.
- Mode: project/context
- Filters - how to filter the root
- Write tests of knitting
- Use visitor for text format
- load a folder and subsidiary projects/folders/tasks
- Add multi level filters to adapters (done folders, finish for other types)
- Add 4 separate filter types to command line and apply
- Build accessor (eg getAvailable) from java
- Write more tests of OSE - enrich the dummy class
- Add slash separation of nodes
- where parsing too restrictive - what about _or? - RETHINK EXPRESSIONS?
- Is notation good enough as is? try examples (alternate main)
- Ressurect use of availability
- More sensible command line order processing
- Unit Tests
- Streaming JSON IO? & parallel execution?
- Wow it's slow - load whole tree from javascript?
- Lose the cacheing?
- Make an executable program
- Implement visitor pattern
- Add sorting
- Add filter to inbox(...)
- Create README
- Parse command line
- Load filters from command line
- How to express filters to end use (command line)r?
- Filter by basic enum? all, remaining, available, completed
- How to filter (streams + javascript?)
- How to export (json/xml to ?)
- load inbox tasks
- What's in which packages, don't like format visitors all lumped together
- Add equals hash code to node
- How to pass filters to javascript
- Escaping strings in params/filters
- make getProject/getContext return list
- make all getters take filter
- Use intermediate file for output
- Enum in query: remaining, available, completed, all
- Process with streams api
- Create executable program
- Parse the dates
- Test mode, capture/replay what comes back from JavaScript
